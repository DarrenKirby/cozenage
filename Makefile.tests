# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -Isrc -g

# --- Application-Specific ---
# Name of your final application executable
APP_TARGET = cozenge_test
# All .c files in src/, including main.c
APP_SOURCES = $(wildcard src/*.c)
APP_OBJECTS = $(patsubst src/%.c, %.o, $(APP_SOURCES))

# --- Test-Specific ---
# Name of your test runner executable
TEST_TARGET = run_tests
# Linker flags for testing (links against Criterion)
LDFLAGS_TEST = -lcriterion -lm -lreadline
# Source files for tests
TEST_SOURCES = $(wildcard tests/*.c)
# Source files from your app, EXCLUDING main.c
# Change 'src/main.c' if your main function is in a different file
APP_SOURCES_FOR_TEST = $(filter-out src/main.c, $(wildcard src/*.c))
# Object files for the test build
TEST_OBJECTS = $(patsubst src/%.c, %.o, $(APP_SOURCES_FOR_TEST)) \
               $(patsubst tests/%.c, %.o, $(TEST_SOURCES))


# --- Build Rules ---

# Default action when you just type 'make'
all: $(APP_TARGET)

# Rule to build the main application
$(APP_TARGET): $(APP_OBJECTS)
	$(CC) $(CFLAGS) -o $@ $^

# Rule to build the test runner
# Note: This is NOT the default target. We build it on demand.
$(TEST_TARGET): $(TEST_OBJECTS)
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS_TEST)

# Generic rule to compile any .c file into a .o file
# This rule is used by both the app and test builds
%.o: src/%.c
	$(CC) $(CFLAGS) -c $< -o $@

%.o: tests/%.c
	$(CC) $(CFLAGS) -c $< -o $@


# --- Execution and Clean Rules ---

# Rule to build AND run the tests
test: $(TEST_TARGET)
	./$(TEST_TARGET)

# Clean up all build artifacts
clean:
	rm -f $(APP_TARGET) $(TEST_TARGET) *.o
